# Create a data frame with PCA results
pca_data <- as.data.frame(pca$x[, 1:2])  # First two principal components
pca_data$Cluster <- kmeans(single_visit[, 6:11], centers = 3, nstart = 100)$cluster
pca_data$Group <- single_visit[, 5]  # Add the group variable
# Create a scatter plot with ggplot2
ggplot(pca_data, aes(x = PC1, y = PC2, color = factor(Cluster), shape = Group)) +
geom_point(size = 3) +
labs(title = "PCA of Clustering Results",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster",
shape = "Group") +
theme_minimal()
# Create a data frame with PCA results
pca_data <- as.data.frame(pca$x[, 1:6])  # First two principal components
pca_data$Cluster <- kmeans(single_visit[, 6:11], centers = 3, nstart = 100)$cluster
pca_data$Group <- single_visit[, 5]  # Add the group variable
# Create a scatter plot with ggplot2
ggplot(pca_data, aes(x = PC1, y = PC2, color = factor(Cluster), shape = Group)) +
geom_point(size = 3) +
labs(title = "PCA of Clustering Results",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster",
shape = "Group") +
theme_minimal()
# Perform PCA on the columns used for k-means
pca <- prcomp(single_visit[, 6:11], center = TRUE, scale. = TRUE)
View(pca)
# Create a scatter plot with ggplot2
ggplot(pca_data, aes(x = PC1, y = PC6, color = factor(Cluster), shape = Group)) +
geom_point(size = 3) +
labs(title = "PCA of Clustering Results",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster",
shape = "Group") +
theme_minimal()
# Create a scatter plot with ggplot2
ggplot(pca_data, aes(x = PC1, y = PC4, color = factor(Cluster), shape = Group)) +
geom_point(size = 3) +
labs(title = "PCA of Clustering Results",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster",
shape = "Group") +
theme_minimal()
# Create a scatter plot with ggplot2
ggplot(pca_data, aes(x = PC3, y = PC4, color = factor(Cluster), shape = Group)) +
geom_point(size = 3) +
labs(title = "PCA of Clustering Results",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster",
shape = "Group") +
theme_minimal()
# Create a scatter plot with ggplot2
ggplot(pca_data, aes(x = PC1, y = PC6, color = factor(Cluster), shape = Group)) +
geom_point(size = 3) +
labs(title = "PCA of Clustering Results",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster",
shape = "Group") +
theme_minimal()
set.seed(123)
visits<- unique(exportwide_simple$visit)
visit_dat <- vector("list", length = length(visits))
for(v in seq_along(visits)){
single_visit <- subset(exportwide_simple, exportwide_simple$visit == visits[v])
visit_dat[[v]] <- as.data.frame(singe_visit)
}
#cluster model optimizaton
single_visit <- visit_dat[[3]]
fit_dat <- single_visit[, 6:12]
fit_dat <- na.omit(fit_dat)
wcss <- vector("numeric", length = 15)
for (i in 1:15) {
kmeans_result <- kmeans(fit_dat, centers = i, nstart = 100)
wcss[i] <- kmeans_result$tot.withinss
}
# Plot the Elbow Method
plot(1:15, wcss, type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters K",
ylab = "Total within-clusters sum of squares")
# Silhouette Method
sil_width <- vector("numeric", length = 15)
for (i in 2:15) {
kmeans_result <- kmeans(fit_dat, centers = i, nstart = 100)
sil <- silhouette(kmeans_result$cluster, dist(fit_dat))
sil_width[i] <- mean(sil[, 3])
}
# Plot the Silhouette Method
plot(2:15, sil_width[2:15], type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters K",
ylab = "Average Silhouette Width")
# now an optimized model for prediction
single_visit <- visit_dat[[3]]
fit_dat <- single_visit
fit_dat <- na.omit(fit_dat)
kmeans_result <- kmeans(fit_dat[,6:12], centers = 3, nstart = 100)
cluster_assignments <- kmeans_result$cluster
single_visit<-cbind(fit_dat,cluster_assignments)
# Perform PCA on the columns used for k-means
pca <- prcomp(single_visit[, 6:11], center = TRUE, scale. = TRUE)
# Create a data frame with PCA results
pca_data <- as.data.frame(pca$x[, 1:6])  # First two principal components
pca_data$Cluster <- kmeans(single_visit[, 6:11], centers = 3, nstart = 100)$cluster
pca_data$Group <- single_visit[, 5]  # Add the group variable
# Create a scatter plot with ggplot2
ggplot(pca_data, aes(x = PC1, y = PC6, color = factor(Cluster), shape = Group)) +
geom_point(size = 3) +
labs(title = "PCA of Clustering Results",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster",
shape = "Group") +
theme_minimal()
View(singe_visit)
View(single_visit)
# Create a data frame with PCA results
pca_data <- as.data.frame(pca$x[, 1:6])  # First two principal components
pca_data$Cluster <- kmeans(single_visit[, 6:11], centers = 3, nstart = 100)$cluster
pca_data$Group <- single_visit[, 3]  # Add the group variable
# Create a scatter plot with ggplot2
ggplot(pca_data, aes(x = PC1, y = PC6, color = factor(Cluster), shape = Group)) +
geom_point(size = 3) +
labs(title = "PCA of Clustering Results",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster",
shape = "Group") +
theme_minimal()
library(ggplot2)
library(tidyverse)
library(cluster)
library(factoextra)
rm(list=ls())
load("./adjustment/workspace_adjusted_wide_simple.Rda")
set.seed(123)
visits<- unique(exportwide_simple$visit)
visit_dat <- vector("list", length = length(visits))
for(v in seq_along(visits)){
single_visit <- subset(exportwide_simple, exportwide_simple$visit == visits[v])
visit_dat[[v]] <- as.data.frame(singe_visit)
}
#cluster model optimizaton
single_visit <- visit_dat[[3]]
fit_dat <- single_visit[, 6:12]
fit_dat <- na.omit(fit_dat)
fit_dat <- scale(fit_dat)
wcss <- vector("numeric", length = 15)
library(ggplot2)
library(tidyverse)
library(cluster)
library(factoextra)
rm(list=ls())
load("./adjustment/workspace_adjusted_wide_simple.Rda")
set.seed(123)
visits<- unique(exportwide_simple$visit)
visit_dat <- vector("list", length = length(visits))
for(v in seq_along(visits)){
single_visit <- subset(exportwide_simple, exportwide_simple$visit == visits[v])
visit_dat[[v]] <- as.data.frame(single_visit)
}
#cluster model optimizaton
single_visit <- visit_dat[[3]]
fit_dat <- single_visit[, 6:12]
fit_dat <- na.omit(fit_dat)
fit_dat <- scale(fit_dat)
wcss <- vector("numeric", length = 15)
for (i in 1:15) {
kmeans_result <- kmeans(fit_dat, centers = i, nstart = 100)
wcss[i] <- kmeans_result$tot.withinss
}
# Plot the Elbow Method
plot(1:15, wcss, type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters K",
ylab = "Total within-clusters sum of squares")
# Silhouette Method
sil_width <- vector("numeric", length = 15)
for (i in 2:15) {
kmeans_result <- kmeans(fit_dat, centers = i, nstart = 100)
sil <- silhouette(kmeans_result$cluster, dist(fit_dat))
sil_width[i] <- mean(sil[, 3])
}
# Plot the Silhouette Method
plot(2:15, sil_width[2:15], type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters K",
ylab = "Average Silhouette Width")
# now an optimized model for prediction
single_visit <- visit_dat[[3]]
fit_dat <- single_visit
fit_dat <- na.omit(fit_dat)
kmeans_result <- kmeans(fit_dat[,6:12], centers = 3, nstart = 100)
# now an optimized model for prediction
single_visit <- visit_dat[[3]]
fit_dat <- single_visit
fit_dat <- na.omit(fit_dat)
View(single_visit)
fit_dat <- single_visit
View(fit_dat)
fit_dat <- fit_dat[,-13:14]
fit_dat <- fit_dat[,-14]
View(fit_dat)
fit_dat <- single_visit
fit_dat$XBB <- NULL
fit_dat$JN <- Null
fit_dat$JN <- NULL
fit_dat<- na.omit(fit_dat)
View(fit_dat)
# now an optimized model for prediction
single_visit <- visit_dat[[3]]
fit_dat <- single_visit
fit_dat$XBB <- NULL
fit_dat$JN <- NULL
View(fit_dat)
fit_dat$BQ <- NULL
fit_dat$XBB <- NULL
fit_dat$JN <- NULL
fit_dat<- na.omit(fit_dat)
kmeans_result <- kmeans(fit_dat[,6:12], centers = 3, nstart = 100)
cluster_assignments <- kmeans_result$cluster
single_visit<-cbind(fit_dat,cluster_assignments)
View(fit_dat)
kmeans_result <- kmeans(fit_dat[,6:11], centers = 3, nstart = 100)
# now an optimized model for prediction
single_visit <- visit_dat[[3]]
fit_dat <- single_visit
fit_dat$BQ <- NULL
fit_dat$XBB <- NULL
fit_dat$JN <- NULL
fit_dat<- na.omit(fit_dat)
kmeans_result <- kmeans(fit_dat[,6:11], centers = 3, nstart = 100)
cluster_assignments <- kmeans_result$cluster
single_visit<-cbind(fit_dat,cluster_assignments)
mosaicplot(single_visit$variant,single_visit$cluster_assignments)
mosaicplot(single_visit$variant,as.factor(single_visit$cluster_assignments))
mosaicplot(single_visit$variant,as.factor(single_visit$cluster_assignments))
mosaicplot(as.factor(single_visit$variant),as.factor(single_visit$cluster_assignments))
?mosaicplot()
mosaicplot(as.factor(variant)~as.factor(cluster_assignments), data = single_visit)
mosaicplot(as.factor(group)~as.factor(cluster_assignments), data = single_visit)
mosaicplot(as.factor(vaccine)~as.factor(cluster_assignments), data = single_visit)
kmeans_result <- kmeans(fit_dat[,6:11], centers = 4, nstart = 100)
cluster_assignments <- kmeans_result$cluster
# now an optimized model for prediction
single_visit <- visit_dat[[3]]
fit_dat <- single_visit
fit_dat$BQ <- NULL
fit_dat$XBB <- NULL
fit_dat$JN <- NULL
fit_dat<- na.omit(fit_dat)
kmeans_result <- kmeans(fit_dat[,6:11], centers = 4, nstart = 100)
cluster_assignments <- kmeans_result$cluster
single_visit<-cbind(fit_dat,cluster_assignments)
mosaicplot(as.factor(vaccine)~as.factor(cluster_assignments), data = single_visit)
install.packages(ggmosaic)
install.packages("ggmosaic")
library(ggmosaic)
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, vaccine), fill = vaccine)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "cluster assignment",
y = "vaccine",
fill = "vaccine") +
theme_minimal()
# Convert to factors if not already
single_visit$cluster_assignments <- as.factor(single_visit$cluster_assignments)
single_visit$vaccine <- as.factor(single_visit$vaccine)
# Create a table of counts for plotting
plot_data <- single_visit %>%
count(cluster_assignments, vaccine)
# Create the mosaic plot with ggplot2
ggplot(plot_data, aes(x = cluster_assignments, y = vaccine, fill = vaccine)) +
geom_tile(aes(width = n, height = n), color = "white") +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "Cluster Assignments",
y = "Vaccine",
fill = "Vaccine") +
theme_minimal()
# Create the mosaic plot with ggplot2
ggplot(single_visit) +
+   geom_mosaic(aes(x = product(cluster_assignments, vaccine), fill = vaccine)) +
+   labs(title = "Mosaic Plot of K-Means Clustering",
+        x = "cluster assignment",
# Create the mosaic plot with ggplot2
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, vaccine), fill = vaccine)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "cluster assignment",
y = "vaccine",
fill = "vaccine") +
theme_minimal()
# Create the mosaic plot with ggplot2
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, vaccine), fill = cluster_assignments)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "cluster assignment",
y = "vaccine",
fill = "vaccine") +
theme_minimal()
# Create the mosaic plot with ggplot2
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, vaccine), fill = cluster_assignments)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "cluster assignment",
y = "vaccine",
fill = "Clusters") +
theme_minimal()
# Create the mosaic plot with ggplot2
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, vaccine), fill = cluster_assignments)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "Vaccine",
y = "Cluster",
fill = "Clusters") +
theme_minimal()
single_visit$group <- as.factor(single_visit$group)
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, group), fill = cluster_assignments)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "Group",
y = "Cluster",
fill = "Clusters") +
theme_minimal()
# now an optimized model for prediction
single_visit <- visit_dat[[3]]
fit_dat <- single_visit
fit_dat$BQ <- NULL
fit_dat$XBB <- NULL
fit_dat$JN <- NULL
fit_dat<- na.omit(fit_dat)
kmeans_result <- kmeans(fit_dat[,6:11], centers = 6, nstart = 100)
cluster_assignments <- kmeans_result$cluster
single_visit<-cbind(fit_dat,cluster_assignments)
# Convert to factors if not already
single_visit$cluster_assignments <- as.factor(single_visit$cluster_assignments)
single_visit$vaccine <- as.factor(single_visit$vaccine)
single_visit$group <- as.factor(single_visit$group)
# Create the mosaic plot with ggplot2
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, vaccine), fill = cluster_assignments)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "Vaccine",
y = "Cluster",
fill = "Clusters") +
theme_minimal()
# now an optimized model for prediction
single_visit <- visit_dat[[3]]
fit_dat <- single_visit
fit_dat$BQ <- NULL
fit_dat$XBB <- NULL
fit_dat$JN <- NULL
fit_dat<- na.omit(fit_dat)
kmeans_result <- kmeans(fit_dat[,6:11], centers = 2, nstart = 100)
cluster_assignments <- kmeans_result$cluster
single_visit<-cbind(fit_dat,cluster_assignments)
# Convert to factors if not already
single_visit$cluster_assignments <- as.factor(single_visit$cluster_assignments)
single_visit$vaccine <- as.factor(single_visit$vaccine)
single_visit$group <- as.factor(single_visit$group)
# Create the mosaic plot with ggplot2
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, vaccine), fill = cluster_assignments)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "Vaccine",
y = "Cluster",
fill = "Clusters") +
theme_minimal()
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, group), fill = cluster_assignments)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "Group",
y = "Cluster",
fill = "Clusters") +
theme_minimal()
# now an optimized model for prediction
single_visit <- visit_dat[[3]]
fit_dat <- single_visit
fit_dat$BQ <- NULL
fit_dat$XBB <- NULL
fit_dat$JN <- NULL
fit_dat<- na.omit(fit_dat)
kmeans_result <- kmeans(fit_dat[,6:11], centers = 3, nstart = 100)
cluster_assignments <- kmeans_result$cluster
single_visit<-cbind(fit_dat,cluster_assignments)
# Convert to factors if not already
single_visit$cluster_assignments <- as.factor(single_visit$cluster_assignments)
single_visit$vaccine <- as.factor(single_visit$vaccine)
single_visit$group <- as.factor(single_visit$group)
# Create the mosaic plot with ggplot2
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, vaccine), fill = cluster_assignments)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "Vaccine",
y = "Cluster",
fill = "Clusters") +
theme_minimal()
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, group), fill = cluster_assignments)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "Group",
y = "Cluster",
fill = "Clusters") +
theme_minimal()
# now an optimized model for prediction
single_visit <- visit_dat[[3]]
fit_dat <- single_visit
fit_dat$BQ <- NULL
fit_dat$XBB <- NULL
fit_dat$JN <- NULL
fit_dat<- na.omit(fit_dat)
kmeans_result <- kmeans(fit_dat[,6:11], centers = 4, nstart = 100)
cluster_assignments <- kmeans_result$cluster
single_visit<-cbind(fit_dat,cluster_assignments)
# Convert to factors if not already
single_visit$cluster_assignments <- as.factor(single_visit$cluster_assignments)
single_visit$vaccine <- as.factor(single_visit$vaccine)
single_visit$group <- as.factor(single_visit$group)
# Create the mosaic plot with ggplot2
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, vaccine), fill = cluster_assignments)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "Vaccine",
y = "Cluster",
fill = "Clusters") +
theme_minimal()
ggplot(single_visit) +
geom_mosaic(aes(x = product(cluster_assignments, group), fill = cluster_assignments)) +
labs(title = "Mosaic Plot of K-Means Clustering",
x = "Group",
y = "Cluster",
fill = "Clusters") +
theme_minimal()
##by Sebastian Einhauser for Einhauser et al.
#Longitudinal effects of SARS-CoV-2 breakthrough infection on imprinting of neutralizing antibody responses
#calculates random forests
library(party)
library(tidyverse)
library(writexl)
library(readxl)
library(ggraph)
library(neuralnet)
library(cito)
library(randomForest)
#clean up, set up environment--------------
rm(list = ls())
mainDir<- getwd()
source(paste0(mainDir,"/functions/test_train_dataset_generator.R"))
source(paste0(mainDir,"/functions/bruteforest.R"))
load(file = paste0(mainDir,"/adjustment/MachineLearn_data_clean.Rda"))
subdir <- paste0(mainDir,"/Fig5_machinelearning/forest/")
if(!dir.exists(subdir)){dir.create(subdir)}
setwd(subdir)
dir.create("./global",showWarnings = FALSE)
dir.create("./vaccinated",showWarnings = FALSE)
dir.create("./unvaccinated",showWarnings = FALSE)
#set the number of iterations
iterations = 99
#split data to vaccinated and unvaccinated-------
data_clean %>%
filter(data_clean$Vaccination == "V" )%>%
as.data.frame()->Vaccinated
data_clean %>%
filter(data_clean$Vaccination == "U" )%>%
as.data.frame()->Unvaccinated
vax_data_by_visit<-as.list(1)
visits<-unique(data_clean$Visit)
for(i in 1:length(visits)){
Vaccinated %>%
filter(Vaccinated$Visit == visits[i])%>%
as.data.frame() -> vax_data_by_visit[[i]]
}
#vaccinated models---------
best_test_visits<-as.list(1)
best_train_visits<-as.list(1)
best_accuracy_visits<-as.list(1)
best_prediction_visits<-as.list(1)
best_table_visits<-as.list(1)
best_forest_visits<-as.list(1)
vaccinated_allaccuracies <- as.data.frame(matrix(NA,nrow = iterations+1,ncol = length(visits)))
vaccinated_allforests<-as.list(1)
vaccinated_visitforests <- as.list(1)
vaccinated_alltest <- as.list(1)
vaccinated_alltrain <- as.list(1)
vaccinated_visittest <- as.list(1)
vaccinated_visittrain <- as.list(1)
#vaccinated models---------
best_test_visits<-as.list(1)
best_train_visits<-as.list(1)
best_accuracy_visits<-as.list(1)
best_prediction_visits<-as.list(1)
best_table_visits<-as.list(1)
best_forest_visits<-as.list(1)
vaccinated_allaccuracies <- as.data.frame(matrix(NA,nrow = iterations+1,ncol = length(visits)))
vaccinated_allforests<-as.list(1)
vaccinated_visitforests <- as.list(1)
vaccinated_alltest <- as.list(1)
vaccinated_alltrain <- as.list(1)
vaccinated_visittest <- as.list(1)
vaccinated_visittrain <- as.list(1)
load("S:/WAGNER/2 Dokumente/Literatur/Eigene Paper/Manuskripte/23-11-06 CoVaKo19/scaled/covako_r/Fig5_machinelearning/forest.RData")
best_forest
mean(best_forest$err.rate[,1])
max(best_forest$err.rate[,1])
best_forest$confusion
best_forest$err.rate[500,1]
tail(forest$err.rate[,1])
forest$err.rate[500,1]
forest
source("S:/WAGNER/2 Dokumente/Literatur/Eigene Paper/Manuskripte/23-11-06 CoVaKo19/scaled/covako_r/Figure5.1_machinelearning_rforest.R", echo=TRUE)
