merged_data <- na.omit(merged_data)
ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free") +
labs(
x = "Virus",
y = "Value",
fill = "Vector-Vaccine"
) +
theme_minimal()
ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free") +
labs(
x = "Virus",
y = "Value",
fill = "Vector-Vaccine"
) +
scale_y_log10() +
theme_minimal()
ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free") +
labs(
x = "Virus",
y = "Neutralization IC 50",
fill = "Vector-Vaccine"
) +
scale_y_log10() +
theme_minimal()
ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free") +
labs(
x = "Neutralized Virus",
y = "Neutralization IC 50",
fill = "Vector-Vaccine"
) +
scale_y_log10() +
theme_minimal()
figureDir<-paste0(getwd(),"/sensitivityanalysis_vector")
if(!dir.exists(figureDir)){dir.create(figureDir)}
png(paste0(figureDir,"/sensitivity_analysis_vector.png"), res = 300, width = 2000, height = 1500)
ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free") +
labs(
x = "Neutralized Virus",
y = "Neutralization IC 50",
fill = "Vector-Vaccine"
) +
scale_y_log10() +
theme_minimal()
dev.off()
figureDir<-paste0(getwd(),"/sensitivityanalysis_vector")
if(!dir.exists(figureDir)){dir.create(figureDir)}
png(paste0(figureDir,"/sensitivity_analysis_vector.png"), res = 600, width = 2000, height = 1500)
ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free") +
labs(
x = "Neutralized Virus",
y = "Neutralization IC 50",
fill = "Vector-Vaccine"
) +
scale_y_log10() +
theme_minimal()
dev.off()
png(paste0(figureDir,"/sensitivity_analysis_vector.png"), res = 300, width = 2500, height = 1500)
ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free") +
labs(
x = "Neutralized Virus",
y = "Neutralization IC 50",
fill = "Vector-Vaccine"
) +
scale_y_log10() +
theme_minimal()
dev.off()
png(paste0(figureDir,"/sensitivity_analysis_vector.png"), res = 300, width = 3000, height = 1600)
ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free") +
labs(
x = "Neutralized Virus",
y = "Neutralization IC 50",
fill = "Vector-Vaccine"
) +
scale_y_log10() +
theme_minimal()
dev.off()
# Calculate summary statistics
summary_stats <- merged_data %>%
group_by(virus, visit, vector) %>%
summarize(mean_value = mean(value), .groups = "drop")
# Calculate summary statistics
summary_stats <- merged_data %>%
group_by(virus, visit, vector) %>%
summarize(mean_value = mean(neutralization), .groups = "drop")
# Check if vector = 1 is always higher than vector = 0
summary_comparison <- summary_stats %>%
pivot_wider(names_from = vector, values_from = mean_value) %>%
mutate(test_result = ifelse(`1` > `0`, "Higher", "Not Higher"))
# Print summary comparison
print("Summary Statistics and Comparison:")
print(summary_comparison)
# Perform statistical test (paired t-test assuming normality)
test_result <- wilcox.test(value ~ vector, data = data, paired = TRUE)
# Perform statistical test (wilcoxon)
test_result <- wilcox.test(value ~ vector, data = data)
# Perform statistical test (wilcoxon)
test_result <- wilcox.test(neutralization ~ vector, data = merged_data)
# Print test result
print("Paired t-test Result:")
print(test_result)
#sensitivity analysis to determine the impact of vector vaccines
library(readxl)
library(dplyr)
library(writexl)
library(tidyverse)
library(ggplot2)
rm(list=ls())
load("./adjustment/workspace_adjusted_wide_simple.Rda")
vaccine_type<-read_excel("./vaccinations.xlsx")
#adjust the format to workable data
vaccine_type <- vaccine_type %>%
mutate(across(5:21, ~ case_when(
is.na(.) ~ "0",
. == "x" ~ "1",
TRUE ~ .
)))
# Convert the specified columns to numeric
vaccine_type <-  vaccine_type %>%
mutate(across(5:21, as.numeric))
#get all the vector vaccines
# Select columns whose names contain "a", "j", or both
selected_cols <- grep("[AJ]", names(vaccine_type), value = TRUE)
# Calculate the sum across rows for selected columns
vaccine_type$vector<- rowSums(vaccine_type[selected_cols])
#all vaccines
vaccine_type<-vaccine_type %>%
mutate(sumall = rowSums(across(5:21)))
#substract the vector vaccines
vaccine_type$no_vector <- vaccine_type$sumall - vaccine_type$vector
#take care of weird column name
names<-colnames(vaccine_type)
names[1]<-"ID_Proband"
colnames(vaccine_type)<- names
#now select the dataof interest
vaccine_type <- vaccine_type %>%
select(all_of(c("ID_Proband", "vector", "no_vector")))
merged_data <- exportwide_simple %>%
left_join(vaccine_type, by = c("ID_study" = "ID_Proband"))
merged_data <- merged_data %>%
pivot_longer(cols = c("D614G","Alpha","Delta","BA1","BA2","BA5","BQ","XBB","JN"), names_to = "virus", values_to = "neutralization")
merged_data <- na.omit(merged_data)
visit_labels <- c(v1 = "Visit 1", v2 = "Visit 2", v4 = "Visit 4", v5 = "Visit 5")
figureDir<-paste0(getwd(),"/sensitivityanalysis_vector")
if(!dir.exists(figureDir)){dir.create(figureDir)}
png(paste0(figureDir,"/sensitivity_analysis_vector.png"), res = 300, width = 3000, height = 1600)
ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free", labeller = labeller(visit = visit_labels)) +
labs(
x = "Neutralized Virus",
y = "Neutralization IC 50",
fill = "Vector-Vaccine"
) +
scale_y_log10() +
theme_minimal()
dev.off()
# Define function to perform Wilcoxon test
wilcoxon_test <- function(df) {
test_result <- tryCatch({
test <- wilcox.test(value ~ vector, data = df, exact = FALSE)
p_value <- test$p.value
list(p_value = p_value)
}, error = function(e) {
list(p_value = NA)
})
return(test_result)
}
# Group by visit and virus, then perform Wilcoxon test for each group
test_results <- merged_data %>%
group_by(visit, virus) %>%
nest() %>%
mutate(test_result = map(data, wilcoxon_test)) %>%
unnest_wider(test_result)
# Print test results
print(test_results)
# Group by visit and virus, then perform Wilcoxon test for each group
test_results <- merged_data %>%
group_by(visit, virus) %>%
nest() %>%
mutate(test_result = map(data, wilcoxon_test)) %>%
unnest_wider(test_result)
# Print test results
print(test_results)
# Group by visit and virus, then perform Wilcoxon test for each group
test_results <- merged_data %>%
group_by(visit, virus) %>%
nest() %>%
mutate(test_result = map(merged_data, wilcoxon_test)) %>%
unnest_wider(test_result)
# Group by visit and virus, then perform Wilcoxon test for each group
test_results <- merged_data %>%
group_by(visit, virus) %>%
nest() %>%
mutate(test_result = map(merged_data, wilcoxon_test)) %>%
unnest_wider(test_result)
# Define function to perform Wilcoxon test
wilcoxon_test <- function(df) {
test_result <- tryCatch({
test <- wilcox.test(neutralization ~ vector, data = df, exact = FALSE)
p_value <- test$p.value
list(p_value = p_value)
}, error = function(e) {
list(p_value = NA)
})
return(test_result)
}
# Group by visit and virus, then perform Wilcoxon test for each group
test_results <- merged_data %>%
group_by(visit, virus) %>%
nest() %>%
mutate(test_result = map(merged_data, wilcoxon_test)) %>%
unnest_wider(test_result)
View(merged_data)
# Group by visit and virus, then perform Wilcoxon test for each group
test_results <- merged_data %>%
group_by(visit, virus) %>%
nest() %>%
mutate(test_result = map(data, wilcoxon_test)) %>%
unnest_wider(test_result)
# Print test results
print(test_results)
write_xlsx(test_results, path = paste0(figureDir,"/multitests.xlsx"))
test_results2 <- merged_data %>%
group_by(visit) %>%
nest() %>%
mutate(test_result = map(data, wilcoxon_test)) %>%
unnest_wider(test_result)
View(test_results2)
write_xlsx(test_results2, path = paste0(figureDir,"/pooledtests.xlsx"))
#sensitivity analysis to determine the impact of vector vaccines
library(readxl)
library(dplyr)
library(writexl)
library(tidyverse)
library(ggplot2)
rm(list=ls())
load("./adjustment/workspace_adjusted_wide_simple.Rda")
vaccine_type<-read_excel("./vaccinations.xlsx")
#adjust the format to workable data
vaccine_type <- vaccine_type %>%
mutate(across(5:21, ~ case_when(
is.na(.) ~ "0",
. == "x" ~ "1",
TRUE ~ .
)))
# Convert the specified columns to numeric
vaccine_type <-  vaccine_type %>%
mutate(across(5:21, as.numeric))
#get all the vector vaccines
# Select columns whose names contain "a", "j", or both
selected_cols <- grep("[AJ]", names(vaccine_type), value = TRUE)
# Calculate the sum across rows for selected columns
vaccine_type$vector<- rowSums(vaccine_type[selected_cols])
#all vaccines
vaccine_type<-vaccine_type %>%
mutate(sumall = rowSums(across(5:21)))
#substract the vector vaccines
vaccine_type$no_vector <- vaccine_type$sumall - vaccine_type$vector
#take care of weird column name
names<-colnames(vaccine_type)
names[1]<-"ID_Proband"
colnames(vaccine_type)<- names
#now select the dataof interest
vaccine_type <- vaccine_type %>%
select(all_of(c("ID_Proband", "vector", "no_vector")))
merged_data <- exportwide_simple %>%
left_join(vaccine_type, by = c("ID_study" = "ID_Proband"))
merged_data <- merged_data %>%
pivot_longer(cols = c("D614G","Alpha","Delta","BA1","BA2","BA5","BQ","XBB","JN"), names_to = "virus", values_to = "neutralization")
merged_data <- na.omit(merged_data)
visit_labels <- c(v1 = "Visit 1", v2 = "Visit 2", v4 = "Visit 4", v5 = "Visit 5")
figureDir<-paste0(getwd(),"/sensitivityanalysis_vector")
ggplot(merged_data, aes(x = labeller(visit = visit_labels), y = neutralization, fill = factor(vector))) +
geom_boxplot() +
labs(
x = "Visit",
y = "Neutralization IC50",
fill = "Vector-Vaccine"
) +
scale_y_log10() +
theme_minimal()
ggplot(merged_data, aes(x = visit, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
labs(
x = "Visit",
y = "Neutralization IC50",
fill = "Vector-Vaccine"
) +
scale_y_log10() +
theme_minimal()
ggplot(merged_data, aes(x = visit, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
labs(
x = "Visit",
y = "Neutralization IC50",
fill = "Vector-Vaccine",
title = "Impact of Vector vaccines on overall Neutralization"
) +
scale_y_log10() +
theme_minimal()
ggplot(merged_data, aes(x = visit, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
labs(
x = "Visit",
y = "Neutralization IC50",
fill = "Vector-Vaccine",
title = "Impact of Vector-Vaccines on Overall Neutralization"
) +
scale_y_log10() +
theme_minimal()
#plot for the pooled analysis
png(paste0(figureDir,"/sensitivity_analysis_vector_pooled.png"), res = 300, width = 3000, height = 1600)
ggplot(merged_data, aes(x = visit, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
labs(
x = "Visit",
y = "Neutralization IC50",
fill = "Vector-Vaccine",
title = "Impact of Vector-Vaccines on Overall Neutralization"
) +
scale_y_log10() +
theme_minimal()
dev.off()
png(paste0(figureDir,"/sensitivity_analysis_vector.png"), res = 300, width = 3000, height = 1600)
ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free", labeller = labeller(visit = visit_labels)) +
labs(
x = "Neutralized Virus",
y = "Neutralization IC 50",
fill = "Vector-Vaccine",
title = "Impact of Vector-Vaccines on Variant Specific Neutralization"
) +
scale_y_log10() +
theme_minimal()
dev.off()
library(cowplot)
#generate one large plot with both subplots
# Generate the first plot
plot_a <- ggplot(merged_data, aes(x = visit, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
labs(
x = "Visit",
y = "Neutralization IC50",
fill = "Vector-Vaccine",
title = "Impact of Vector-Vaccines on Overall Neutralization"
) +
scale_y_log10() +
theme_minimal()
plot_b <- ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free", labeller = labeller(visit = visit_labels)) +
labs(
x = "Neutralized Virus",
y = "Neutralization IC50",
fill = "Vector-Vaccine",
title = "Impact of Vector-Vaccines on Variant Specific Neutralization"
) +
scale_y_log10() +
theme_minimal()
# Combine the plots
combined_plot <- plot_grid(plot_a, plot_b, ncol = 1, align = 'v', rel_heights = c(1, 1))
# Save the combined plot to a file
png(paste0(figureDir,"/combined_sensitivity_analysis_vector.png"), res = 300, width = 3000, height = 3200)
print(combined_plot)
dev.off()
# Add labels "A" and "B"
labeled_plot <- ggdraw() +
draw_plot(combined_plot, 0, 0, 1, 1) +
draw_plot_label(label = c("A", "B"), x = c(0, 0), y = c(1, 0.5), hjust = -0.5, vjust = 1.5, size = 14)
# Save the combined plot to a file
png(paste0(figureDir,"/combined_sensitivity_analysis_vector.png"), res = 300, width = 3000, height = 3200)
print(combined_plot)
dev.off()
print(combined_plot)
print(labeled_plot)
# Save the combined plot to a file
png(paste0(figureDir,"/combined_sensitivity_analysis_vector.png"), res = 300, width = 3000, height = 3200)
print(labeled_plot)
dev.off()
#generate one large plot with both subplots
# Define custom legend labels
vector_labels <- c("0" = "No Vector", "1" = "Vector")
# Generate the first plot
plot_a <- ggplot(merged_data, aes(x = visit, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
labs(
x = "Visit",
y = "Neutralization IC50",
fill = "Vector-Vaccine",
title = "Impact of Vector-Vaccines on Overall Neutralization"
) +
scale_fill_manual(values = c("0" = "#2fbfc4", "1" = "#e96c6c"), labels = vector_labels) +
scale_y_log10() +
theme_minimal()
# Generate the second plot
plot_b <- ggplot(merged_data, aes(x = virus, y = neutralization, fill = factor(vector))) +
geom_boxplot() +
facet_wrap(~ visit, scales = "free", labeller = labeller(visit = visit_labels)) +
labs(
x = "Neutralized Virus",
y = "Neutralization IC50",
fill = "Vector-Vaccine",
title = "Impact of Vector-Vaccines on Variant Specific Neutralization"
) +
scale_fill_manual(values = c("0" = "#2fbfc4", "1" = "#e96c6c"), labels = vector_labels) +
scale_y_log10() +
theme_minimal()
# Combine the plots
combined_plot <- plot_grid(plot_a, plot_b, ncol = 1, align = 'v', rel_heights = c(1, 1))
# Add labels "A" and "B"
labeled_plot <- ggdraw() +
draw_plot(combined_plot, 0, 0, 1, 1) +
draw_plot_label(label = c("A", "B"), x = c(0, 0), y = c(1, 0.5), hjust = -0.5, vjust = 1.5, size = 14)
# Save the combined and labeled plot to a file
png(paste0(figureDir,"/combined_sensitivity_analysis_vector.png"), res = 300, width = 3000, height = 3200)
print(labeled_plot)
dev.off()
install.packages("ggsignif")
# Group by visit and virus, then perform unpaired Wilcoxon test for each group
test_results <- merged_data %>%
group_by(visit, virus) %>%
nest() %>%
mutate(test_result = map(data, wilcoxon_test)) %>%
unnest_wider(test_result)
# Define function to perform Wilcoxon test
wilcoxon_test <- function(df) {
test_result <- tryCatch({
test <- wilcox.test(neutralization ~ vector, data = df, exact = FALSE)
p_value <- test$p.value
list(p_value = p_value)
}, error = function(e) {
list(p_value = NA)
})
return(test_result)
}
# Group by visit and virus, then perform unpaired Wilcoxon test for each group
test_results <- merged_data %>%
group_by(visit, virus) %>%
nest() %>%
mutate(test_result = map(data, wilcoxon_test)) %>%
unnest_wider(test_result)
#sensitivity analysis to determine the impact of vector vaccines
library(readxl)
library(dplyr)
library(writexl)
library(tidyverse)
library(ggplot2)
library(cowplot)
library(ggsignif)
# Define function to perform Wilcoxon test
wilcoxon_test <- function(df) {
test_result <- tryCatch({
test <- wilcox.test(neutralization ~ vector, data = df, exact = FALSE)
p_value <- test$p.value
list(p_value = p_value)
}, error = function(e) {
list(p_value = NA)
})
return(test_result)
}
# Group by visit and virus, then perform unpaired Wilcoxon test for each group
test_results <- merged_data %>%
group_by(visit, virus) %>%
nest() %>%
mutate(test_result = map(data, wilcoxon_test)) %>%
unnest_wider(test_result)
View(test_results)
#add pvalues
plot_b <- plot_b +
geom_signif(
data = test_results, aes(
x = virus,
y_position = 2565,
xmin = 0.8, xmax = 1.2,
annotations = p_value
),
manual = TRUE,
step_increase = 0.1
)
View(test_results)
View(test_results)
#add pvalues
plot_b <- plot_b +
geom_signif(
data = test_results, aes(
x = virus,
y_position = 2565,
xmin = 0.8, xmax = 1.2,
annotations = p_value
),
manual = TRUE,
step_increase = 0.1
)
plot_b
source("S:/WAGNER/2 Dokumente/Literatur/Eigene Paper/Manuskripte/23-11-06 CoVaKo19/scaled/covako_r/Figure5.2_neuralnets.R", echo=TRUE)
